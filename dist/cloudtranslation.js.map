{"version":3,"names":[],"mappings":"","sources":["cloudtranslation.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar Translation = (function () {\n    function Translation() {\n        this.Translations = [];\n    }\n    return Translation;\n}());\nvar TranslationValue = (function () {\n    function TranslationValue(language, text) {\n        this.Language = language;\n        this.Text = text;\n    }\n    return TranslationValue;\n}());\nvar Language = (function () {\n    function Language() {\n    }\n    Object.defineProperty(Language.prototype, \"Direction\", {\n        get: function () {\n            if (this._direction === undefined)\n                return 'ltr';\n            return this._direction;\n        },\n        set: function (value) {\n            this._direction = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Language;\n}());\nvar TranslationStatusResult;\n(function (TranslationStatusResult) {\n    TranslationStatusResult[TranslationStatusResult[\"Ignored\"] = 1] = \"Ignored\";\n    TranslationStatusResult[TranslationStatusResult[\"Succeeded\"] = 2] = \"Succeeded\";\n    TranslationStatusResult[TranslationStatusResult[\"Failed\"] = 3] = \"Failed\";\n})(TranslationStatusResult || (TranslationStatusResult = {}));\nvar TranslationStatus = (function () {\n    function TranslationStatus(element, result, text) {\n        this.Element = element;\n        this.Result = result;\n        this.Text = text;\n    }\n    return TranslationStatus;\n}());\nvar CloudTranslation = (function () {\n    function CloudTranslation() {\n    }\n    Object.defineProperty(CloudTranslation, \"NonTranslatedElements\", {\n        get: function () {\n            return ['code', 'html', 'head', 'head > *'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"StylePropertiesToSwitch\", {\n        get: function () {\n            return ['padding-left', 'padding-right', 'margin-left', 'margin-right', 'border-left-width', 'border-right-width'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"StylePropertiesToOpposite\", {\n        get: function () {\n            return ['text-align', 'float', 'background-position-x'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"TranslatorProviderKey\", {\n        get: function () {\n            return this.ConfigurationData.Settings.TranslatorProviderKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"TranslatorProvider\", {\n        get: function () {\n            return this.ConfigurationData.Settings.TranslatorProvider;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"UrlLanguageLocation\", {\n        get: function () {\n            return this.ConfigurationData.Settings.UrlLanguageLocation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"LogTranslationsFromProvider\", {\n        get: function () {\n            if (this.ConfigurationData.Settings.LogTranslationsFromProvider === undefined)\n                return false;\n            return this.ConfigurationData.Settings.LogTranslationsFromProvider;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"SupportsTranslateAttribute\", {\n        get: function () {\n            if (this._supportsTranslateAttribute !== undefined)\n                return this._supportsTranslateAttribute;\n            return this._supportsTranslateAttribute = $('body')[0].translate !== undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CloudTranslation.DoTranslateElement = function (element) {\n        if (this.SupportsTranslateAttribute) {\n            if (element.translate === false || ($(element).closest('*[translate]')[0] !== undefined && $(element).closest('*[translate]')[0].translate === false))\n                return false;\n            else\n                return true;\n        }\n        var attribute = $(element).attr('translate');\n        if (attribute === undefined) {\n            if ($(element).closest('*[translate]')[0] !== undefined && $(element).closest('*[translate]').attr('translate').toLowerCase() === 'no')\n                return false;\n            else\n                return true;\n        }\n        if (attribute.toLowerCase() === 'no')\n            return false;\n        return true;\n    };\n    Object.defineProperty(CloudTranslation, \"ConfigurationData\", {\n        get: function () {\n            if (CloudTranslation._configurationData !== undefined)\n                return CloudTranslation._configurationData;\n            CloudTranslation._configurationData = JSON.parse($('#CloudTranslationConfig').html());\n            $('#CloudTranslationConfig').remove();\n            return CloudTranslation._configurationData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"DefaultLanguage\", {\n        get: function () {\n            var _this = this;\n            if (this._defaultLanguage !== undefined)\n                return this._defaultLanguage;\n            this.Languages.forEach(function (language) {\n                if (language.Code.toLowerCase() === _this.ConfigurationData.Settings.DefaultLanguage.toLowerCase())\n                    _this._defaultLanguage = language;\n            });\n            return this._defaultLanguage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"Languages\", {\n        get: function () {\n            if (CloudTranslation._languages !== undefined)\n                return CloudTranslation._languages;\n            CloudTranslation._languages = [];\n            $.each(CloudTranslation.ConfigurationData.Languages, function (key, value) {\n                var language = new Language();\n                language.Code = value.Code;\n                language.DisplayName = value.DisplayName;\n                language.Direction = value.Direction;\n                CloudTranslation._languages.push(language);\n            });\n            return CloudTranslation._languages;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CloudTranslation.ParseLanguage = function (requestLanguage) {\n        requestLanguage = requestLanguage.trim().toLowerCase();\n        var result;\n        this.Languages.forEach(function (language) {\n            if (language.Code.toLowerCase() === requestLanguage)\n                result = language;\n        });\n        if (result !== undefined)\n            return result;\n        if (requestLanguage.indexOf('-') !== -1)\n            this.Languages.forEach(function (language) {\n                if (language.Code.toLowerCase() === requestLanguage.split('-')[0])\n                    result = language;\n            });\n        if (result !== undefined)\n            return result;\n        return this.DefaultLanguage;\n    };\n    Object.defineProperty(CloudTranslation, \"Direction\", {\n        get: function () {\n            return this.CurrentLanguage.Direction || 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CloudTranslation, \"Translations\", {\n        get: function () {\n            if (CloudTranslation._translations !== undefined)\n                return CloudTranslation._translations;\n            CloudTranslation._translations = [];\n            $.each(CloudTranslation.ConfigurationData.Translations, function (key, value) {\n                var translation = new Translation();\n                translation.Default = new TranslationValue(CloudTranslation.DefaultLanguage.Code, value[CloudTranslation.DefaultLanguage.Code]);\n                var currentLanguageCode = CloudTranslation.CurrentLanguage.Code;\n                if (value[currentLanguageCode] === undefined) {\n                    if (currentLanguageCode.indexOf('-') !== -1)\n                        currentLanguageCode = currentLanguageCode.split('-')[0];\n                    if (value[currentLanguageCode] === undefined)\n                        return;\n                }\n                translation.Translations.push(new TranslationValue(CloudTranslation.CurrentLanguage.Code, value[currentLanguageCode]));\n                CloudTranslation._translations.push(translation);\n            });\n            return CloudTranslation._translations;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CloudTranslation.GetTranslation = function (text) {\n        if (this.CurrentLanguage.Code === this.DefaultLanguage.Code)\n            return text;\n        var translation = null;\n        CloudTranslation.Translations.forEach(function (t) {\n            if (t.Default.Text.trim() === text.trim())\n                translation = t;\n        });\n        if (translation === null)\n            return undefined;\n        translation.Translations.forEach(function (t) {\n            if (t.Language === CloudTranslation.CurrentLanguage.Code)\n                text = text.replace(text.trim(), t.Text);\n        });\n        return text;\n    };\n    CloudTranslation.TranslateElement = function (element) {\n        if (element === undefined)\n            return [];\n        if (CloudTranslation.Direction === 'rtl') {\n            var style = element.style.cssText;\n            if (style !== undefined) {\n                $(element).data('_ctoriginalstyle', style);\n                var rtlStyle = '';\n                for (var i = 0; i < element.style.length; i++) {\n                    var propertyName = element.style[i];\n                    if (CloudTranslation.StylePropertiesToOpposite.indexOf(propertyName) !== -1)\n                        rtlStyle += CloudTranslation.OppositeRTLCSSValues(element, propertyName);\n                    else if (CloudTranslation.StylePropertiesToSwitch.indexOf(propertyName) !== -1)\n                        rtlStyle += CloudTranslation.SwitchRTLCSSValues(element, propertyName);\n                    else\n                        rtlStyle += propertyName + ': ' + element.style[propertyName] + '; ';\n                }\n                if (rtlStyle !== style) {\n                    $(element).data('_ctoriginalstyle', style);\n                    element.style.cssText = rtlStyle;\n                }\n            }\n        }\n        else {\n            var originalStyle = $(element).data('_ctoriginalstyle');\n            if (originalStyle !== '') {\n                $(element).attr('style', originalStyle);\n                $(element).removeData('_ctoriginalstyle');\n            }\n        }\n        if (!this.DoTranslateElement(element))\n            return [];\n        if (element.tagName === 'A') {\n            var elementHref = element.getAttribute('href');\n            if (elementHref.indexOf(':') !== -1) {\n                elementHref = elementHref.split(':')[0].toLowerCase();\n                if (elementHref === 'mailto' || elementHref === 'tel') {\n                    element.setAttribute('dir', 'ltr');\n                    return [];\n                }\n            }\n        }\n        var translationStatuses = [];\n        try {\n            translationStatuses.push(CloudTranslation.TranslateElementText(element));\n        }\n        catch (e) { }\n        try {\n            translationStatuses.push(CloudTranslation.TranslateElementTitle(element));\n        }\n        catch (e) { }\n        return translationStatuses;\n    };\n    CloudTranslation.OnlyUnique = function (value, index, self) {\n        return self.indexOf(value) === index;\n    };\n    CloudTranslation.TranslateElementText = function (element) {\n        var childNode = element.childNodes[0];\n        if (childNode === undefined)\n            return new TranslationStatus(element, TranslationStatusResult.Ignored);\n        if (childNode.nodeValue === null)\n            return new TranslationStatus(element, TranslationStatusResult.Ignored);\n        if (childNode.nodeValue.trim() === '')\n            return new TranslationStatus(element, TranslationStatusResult.Ignored);\n        var translationStatus = CloudTranslation.Translate(element, '_ctoriginaltext', childNode.nodeValue);\n        switch (translationStatus.Result) {\n            case TranslationStatusResult.Succeeded:\n                childNode.nodeValue = translationStatus.Text;\n                return translationStatus;\n            case TranslationStatusResult.Failed:\n                childNode.nodeValue = translationStatus.Text;\n                translationStatus.Attribute = 'text';\n                return translationStatus;\n            default:\n                return translationStatus;\n        }\n    };\n    CloudTranslation.TranslateElementTitle = function (element) {\n        var translationStatus = CloudTranslation.Translate(element, '_ctoriginaltitle', element.title);\n        switch (translationStatus.Result) {\n            case TranslationStatusResult.Succeeded:\n                element.title = translationStatus.Text;\n                return translationStatus;\n            case TranslationStatusResult.Failed:\n                element.title = translationStatus.Text;\n                translationStatus.Attribute = 'title';\n                return translationStatus;\n            default:\n                return translationStatus;\n        }\n    };\n    CloudTranslation.Translate = function (element, dataValueName, currentValue) {\n        var originalText;\n        if ($(element).data(dataValueName) !== undefined)\n            originalText = $(element).data(dataValueName);\n        if ((originalText === undefined || originalText.trim() === '') && (currentValue === null || currentValue.trim() === ''))\n            return new TranslationStatus(element, TranslationStatusResult.Ignored);\n        if (originalText === undefined || originalText.trim() === '')\n            originalText = currentValue;\n        var translatedText = CloudTranslation.GetTranslation(originalText);\n        if (translatedText === undefined) {\n            $(element).removeData(dataValueName);\n            return new TranslationStatus(element, TranslationStatusResult.Failed, originalText);\n        }\n        if (translatedText !== originalText)\n            $(element).data(dataValueName, originalText);\n        else\n            $(element).removeData(dataValueName);\n        return new TranslationStatus(element, TranslationStatusResult.Succeeded, translatedText);\n    };\n    CloudTranslation.AddRTLCSS = function () {\n        var style = document.createElement('style');\n        style.type = 'text/css';\n        style.innerHTML = CloudTranslation.GenerateRTLCSS();\n        document.getElementsByTagName('head')[0].appendChild(style);\n    };\n    CloudTranslation.GenerateRTLCSS = function () {\n        var style = 'html[dir=\"rtl\"] {direction: rtl;}';\n        $.each(document.styleSheets, function (index, sheet) {\n            try {\n                style += CloudTranslation.GetRulesStyle(sheet['cssRules'] || sheet['rules']);\n            }\n            catch (e) { }\n        });\n        return style;\n    };\n    CloudTranslation.GetRulesStyle = function (rules) {\n        var result = '';\n        $.each(rules, function (index, rule) {\n            if (rule.type === 4) {\n                var mediaStyle = void 0;\n                try {\n                    mediaStyle = CloudTranslation.GetRulesStyle(rule['cssRules'] || rule['rules']);\n                }\n                catch (e) {\n                    return;\n                }\n                if (mediaStyle !== '') {\n                    result += '@media ' + rule.conditionText + '{';\n                    result += mediaStyle;\n                    result += '}';\n                }\n            }\n            if (rule.style === undefined)\n                return;\n            var selectorStyle = '';\n            CloudTranslation.StylePropertiesToOpposite.forEach(function (property) {\n                selectorStyle += CloudTranslation.OppositeRTLCSSValues(rule, property);\n            });\n            CloudTranslation.StylePropertiesToSwitch.forEach(function (property) {\n                selectorStyle += CloudTranslation.SwitchRTLCSSValues(rule, property);\n            });\n            if (selectorStyle !== '')\n                result += 'html[dir=rtl] ' + rule.selectorText + '{' + selectorStyle + '}';\n        });\n        return result;\n    };\n    CloudTranslation.SwitchRTLCSSValues = function (rule, name) {\n        var value = rule.style[name];\n        if (value === '')\n            return '';\n        var style = '';\n        if (name.indexOf('left') !== -1)\n            name = name.replace('left', 'right');\n        else\n            name = name.replace('right', 'left');\n        style += name + ': ' + value + ';';\n        return style;\n    };\n    CloudTranslation.OppositeRTLCSSValues = function (rule, name) {\n        var value = rule.style[name];\n        if (value === '')\n            return '';\n        var style = '';\n        if (value === 'left')\n            style += name + ': right;';\n        else if (value === 'right')\n            style += name + ': left;';\n        else if (CloudTranslation.CanBeNegative(value)) {\n            if (value.indexOf('-') === 0)\n                style += name + ': ' + value.substr(1) + ';';\n            else\n                style += name + ': -' + value + ';';\n        }\n        return style;\n    };\n    CloudTranslation.CanBeNegative = function (value) {\n        var unites = ['px', 'pt', 'pc', 'cm', 'mm', 'in', 'em', 'rem', 'vw', 'vh', 'ex', 'ch', 'vmin', 'vmax', '%'];\n        var isTrue = false;\n        unites.forEach(function (unit) {\n            if (value.indexOf(unit) > 0 && value.indexOf(' ') === -1)\n                isTrue = true;\n        });\n        return isTrue;\n    };\n    CloudTranslation.AzureAutoTranslate = function (texts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var bodyData, data, translatedTexts, jsonTranslations;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (texts.length === 0)\n                            return [2, []];\n                        bodyData = '';\n                        texts.forEach(function (text) { bodyData += '{\"Text\": \"' + text + '\"},'; });\n                        return [4, $.ajax({\n                                url: 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=' + this.DefaultLanguage.Code + '&to=' + this.CurrentLanguage.Code,\n                                type: \"POST\",\n                                dataType: 'json',\n                                data: '[' + bodyData + ']',\n                                cache: true,\n                                beforeSend: function (xhrObj) {\n                                    xhrObj.setRequestHeader(\"Content-Type\", \"application/json\");\n                                    xhrObj.setRequestHeader(\"Ocp-Apim-Subscription-Key\", _this.TranslatorProviderKey);\n                                },\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        translatedTexts = [];\n                        jsonTranslations = '';\n                        $.each(data, function (index, translations) {\n                            translatedTexts[index] = translations.translations[0].text;\n                            if (_this.LogTranslationsFromProvider)\n                                jsonTranslations += '{\"' + _this.DefaultLanguage.Code + '\": \"' + texts[index] + '\", \"' + _this.CurrentLanguage.Code + '\": \"' + translatedTexts[index] + '\"},';\n                        });\n                        if (this.LogTranslationsFromProvider)\n                            console.log(jsonTranslations);\n                        return [2, translatedTexts];\n                }\n            });\n        });\n    };\n    CloudTranslation.UpdateCurrentLanguage = function () {\n        var localStorageLanguage;\n        var urlLanguage;\n        var browserLanguage;\n        var result;\n        try {\n            result = localStorage.getItem('lang');\n        }\n        catch (_a) {\n            console.log('localStorage is not supported.');\n            result = null;\n        }\n        if (result !== null)\n            localStorageLanguage = this.ParseLanguage(result);\n        if (this.UrlLanguageLocation !== undefined) {\n            var urlValue_1;\n            if (this.UrlLanguageLocation === 'Subdirectory')\n                urlValue_1 = window.location.pathname.split('/')[1];\n            if (urlValue_1 !== undefined)\n                if (urlValue_1.length === 2 || (urlValue_1.length === 5 && urlValue_1.indexOf('-') === 2)) {\n                    this.Languages.forEach(function (language) {\n                        if (language.Code.toLowerCase() === urlValue_1.toLowerCase())\n                            result = language.Code;\n                    });\n                    if (urlValue_1.indexOf('-') !== -1 && result === undefined) {\n                        urlValue_1 = urlValue_1.split('-')[0];\n                        this.Languages.forEach(function (language) {\n                            if (language.Code.toLowerCase() === urlValue_1.toLowerCase())\n                                result = language.Code;\n                        });\n                    }\n                    if (result !== undefined)\n                        urlLanguage = this.ParseLanguage(result);\n                }\n        }\n        result = navigator['language'] || navigator['userLanguage'];\n        if (result !== undefined)\n            browserLanguage = this.ParseLanguage(result);\n        if (urlLanguage !== undefined)\n            this.SetCurrentLanguage(urlLanguage.Code);\n        else if (localStorageLanguage !== undefined)\n            this.SetCurrentLanguage(localStorageLanguage.Code);\n        else if (browserLanguage !== undefined)\n            this.SetCurrentLanguage(browserLanguage.Code);\n        else\n            this.SetCurrentLanguage(this.DefaultLanguage.Code);\n    };\n    Object.defineProperty(CloudTranslation, \"CurrentLanguage\", {\n        get: function () {\n            if (this._currentLanguage !== undefined)\n                return this._currentLanguage;\n            this.UpdateCurrentLanguage();\n            return this._currentLanguage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CloudTranslation.UpdateUrlLanguage = function () {\n        if (this.UrlLanguageLocation === undefined)\n            return;\n        if (this.UrlLanguageLocation === 'Subdirectory') {\n            var pathnameSplitted = window.location.pathname.split('/');\n            var currentLanguageCode = pathnameSplitted[1];\n            if (currentLanguageCode.length === 2 || (currentLanguageCode.length === 5 && currentLanguageCode.indexOf('-') === 2))\n                pathnameSplitted[1] = this.CurrentLanguage.Code;\n            else\n                pathnameSplitted.splice(1, 0, this.CurrentLanguage.Code);\n            history.replaceState(null, null, pathnameSplitted.join('/'));\n        }\n    };\n    CloudTranslation.SetCurrentLanguage = function (languageCode) {\n        this._currentLanguage = this.ParseLanguage(languageCode);\n        try {\n            localStorage.setItem('lang', this._currentLanguage.Code);\n        }\n        catch (_a) {\n            console.log('localStorage is not supported.');\n        }\n        this.UpdateUrlLanguage();\n    };\n    CloudTranslation.TranslateDOM = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var styleSheet, selection, translationStatuses, originalTexts_1, translatedTexts, e_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        $('html').attr('lang', CloudTranslation.CurrentLanguage.Code);\n                        $('html').attr('dir', CloudTranslation.Direction);\n                        $.each(document.styleSheets, function (index, sheet) {\n                            try {\n                                $.each(sheet['cssRules'] || sheet['rules'], function (ruleIndex, rule) {\n                                    if (rule.cssText === 'html[dir=\"rtl\"] { direction: rtl; }')\n                                        styleSheet = sheet;\n                                });\n                            }\n                            catch (e) { }\n                        });\n                        if (CloudTranslation.Direction === 'rtl' && styleSheet === undefined)\n                            CloudTranslation.AddRTLCSS();\n                        selection = '*';\n                        CloudTranslation.NonTranslatedElements.forEach(function (element) {\n                            selection += ':not(' + '\"' + element + '\"' + ')';\n                        });\n                        translationStatuses = [];\n                        return [4, $(selection).toArray().forEach(function (e) { return __awaiter(_this, void 0, void 0, function () {\n                                return __generator(this, function (_a) {\n                                    try {\n                                        CloudTranslation.TranslateElement(e).forEach(function (status) {\n                                            translationStatuses.push(status);\n                                        });\n                                    }\n                                    catch (e) { }\n                                    return [2];\n                                });\n                            }); })];\n                    case 1:\n                        _a.sent();\n                        if (!(this.CurrentLanguage.Code !== this.DefaultLanguage.Code)) return [3, 7];\n                        originalTexts_1 = [];\n                        translationStatuses.forEach(function (status) {\n                            try {\n                                switch (status.Result) {\n                                    case TranslationStatusResult.Failed:\n                                        originalTexts_1.push(status.Text.replace(/\"/g, '\\\\\"'));\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }\n                            catch (e) { }\n                        });\n                        originalTexts_1 = originalTexts_1.filter(this.OnlyUnique);\n                        if (!(this.TranslatorProvider.toLowerCase() === 'azure')) return [3, 5];\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4, this.AzureAutoTranslate(originalTexts_1)];\n                    case 3:\n                        translatedTexts = _a.sent();\n                        $.each(translatedTexts, function (index, text) {\n                            try {\n                                var translation = new Translation();\n                                translation.Default = new TranslationValue(CloudTranslation.DefaultLanguage.Code, originalTexts_1[index]);\n                                translation.Translations.push(new TranslationValue(CloudTranslation.CurrentLanguage.Code, text));\n                                CloudTranslation._translations.push(translation);\n                            }\n                            catch (e) { }\n                        });\n                        return [3, 5];\n                    case 4:\n                        e_1 = _a.sent();\n                        return [3, 5];\n                    case 5: return [4, translationStatuses.forEach(function (status) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, _b, _c, _d, _e;\n                            return __generator(this, function (_f) {\n                                switch (_f.label) {\n                                    case 0:\n                                        _a = status.Result;\n                                        switch (_a) {\n                                            case TranslationStatusResult.Failed: return [3, 1];\n                                        }\n                                        return [3, 6];\n                                    case 1:\n                                        if (!(status.Attribute === 'title')) return [3, 3];\n                                        _c = (_b = translationStatuses).push;\n                                        return [4, CloudTranslation.TranslateElementTitle(status.Element)];\n                                    case 2:\n                                        _c.apply(_b, [_f.sent()]);\n                                        return [3, 5];\n                                    case 3:\n                                        _e = (_d = translationStatuses).push;\n                                        return [4, CloudTranslation.TranslateElementText(status.Element)];\n                                    case 4:\n                                        _e.apply(_d, [_f.sent()]);\n                                        _f.label = 5;\n                                    case 5: return [3, 7];\n                                    case 6: return [3, 7];\n                                    case 7: return [2];\n                                }\n                            });\n                        }); })];\n                    case 6:\n                        _a.sent();\n                        _a.label = 7;\n                    case 7:\n                        this._currentLanguage = undefined;\n                        this._translations = undefined;\n                        return [2];\n                }\n            });\n        });\n    };\n    CloudTranslation.FillInLanguages = function () {\n        var selection = $('.CloudTranslationSelection');\n        if (selection.length === 0)\n            return;\n        selection.attr('translate', 'no');\n        selection.html('');\n        var currentLanguage = this.CurrentLanguage.Code;\n        CloudTranslation.Languages.forEach(function (language) {\n            $('.CloudTranslationSelection').append('<option value=\"' + language.Code + '\"' + (language.Code === currentLanguage ? ' selected ' : '') + '>' + language.DisplayName + '</option>');\n        });\n    };\n    return CloudTranslation;\n}());\n$(function () {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    CloudTranslation.UpdateCurrentLanguage();\n                    CloudTranslation.FillInLanguages();\n                    return [4, CloudTranslation.TranslateDOM()];\n                case 1:\n                    _a.sent();\n                    return [2];\n            }\n        });\n    });\n});\n$(document).on('change', '.CloudTranslationSelection', function () {\n    var languageCode = $(this).val().toString();\n    if (languageCode !== '')\n        CloudTranslation.SetCurrentLanguage(languageCode);\n    CloudTranslation.TranslateDOM();\n    $('html, body, #Body, .Body').animate({ scrollTop: 0 }, 'fast');\n});\n"],"file":"cloudtranslation.js"}